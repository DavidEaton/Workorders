@model DsiWorkorders.Web.ViewModels.WorkorderEditViewModel
@using DsiWorkorders.Web.Helpers

@{
    ViewBag.Title = "Edit Workorder";
}

<div class="row">
    <div class="col-md-7">
        <p class="muted lead">@ViewBag.Title</p>

        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "editform" })) 
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.Reported)
            @Html.HiddenFor(m => m.Reporter)

            <div class="wo-form-contents">
                <div class="wo-form-child">
                    <fieldset>
                        <div class="row">
                            <div class="col-md-6">

                                <div class="form-group">
                                    @Html.LabelFor(model => model.DepartmentId)
                                    @Html.DropDownListFor(model => model.DepartmentId, Model.Departments, "Select Department", new { @class = "form-control", @autofocus = "" })
                                    @Html.ValidationMessageFor(model => model.DepartmentId)
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Reporter)
                                    @Html.TextBoxFor(model => model.Reporter, new { @class = "form-control", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.Reporter)

                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Priority)
                                    @Html.DropDownListFor(model => model.Priority, Model.Priorities, "Select Priority", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Priority)

                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Details)
                                    @Html.TextAreaFor(model => model.Details, new { @class = "form-control", @rows = "5" })
                                    @Html.ValidationMessageFor(model => model.Details)
                                </div>                               
                                <div class="form-group">
                                    <div class="checkbox person-checkbox-toggle-btn">
                                        <label>@Html.CheckBoxFor(model => model.ResultOfPersonServed)@*<input type="checkbox" value="" checked="checked">*@Result of Person Served</label>
                                    </div>
                                 
                                    <div class="person-served-inputbox">
                                        @Html.TextBoxFor(model => model.PersonServed, new { @class = "form-control", placeholder = "Enter Name of Person", @minlength = "3" })
                                        @Html.ValidationMessageFor(model => model.PersonServed)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Estimate)
                                    @Html.TextBoxFor(model => model.Estimate, string.Format("{0:c}", Model.Estimate))
                                    @Html.ValidationMessageFor(model => model.Estimate)
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.PoNumber)
                                    @Html.TextBoxFor(model => model.PoNumber, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PoNumber)
                                </div>
                            </div>
                            <div class="col-md-6">

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Reported)
                                    @Html.TextBoxFor(model => model.Reported, string.Format("{0:MM/dd/yyyy}", Model.Reported), new { @class = "form-control", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.Reported)
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Due)
                                    @Html.TextBoxFor(model => model.Due, string.Format("{0:MM/dd/yyyy}", Model.Due), new { @class = "form-control", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.Due)

                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DaysOpen)
                                    @Html.TextBoxFor(model => model.DaysOpen, new { @class = "form-control", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.DaysOpen)

                                </div>
                                <div class="form-group">
                                    <label class="checkbox">
                                        Overdue <span style="margin-left:25px;">@Html.CheckBoxFor(model => model.Overdue, new { @disabled = "disabled" }) </span>
                                    </label>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DaysOverdue)
                                    @Html.TextBoxFor(model => model.DaysOverdue, new { @class = "form-control", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.DaysOverdue)
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Closed)
                                    @Html.TextBoxFor(model => model.Closed, Model.Closed.HasValue ? string.Format("{0:MM/dd/yyyy}", Model.Closed) : string.Empty, new { @class = "form-control wo-jquery-datepicker" })
                                    @Html.ValidationMessageFor(model => model.Closed)

                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Closer)
                                    @Html.TextBoxFor(model => model.Closer, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Closer)
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Resolution)
                                    @Html.TextAreaFor(model => model.Resolution, new { @class = "form-control", @rows = "4" })
                                    @Html.ValidationMessageFor(model => model.Resolution)
                                </div>
                            </div>
                        </div>

                    </fieldset>

                </div>
                <div class="wo-form-buttons clearfix">
                    <button type="submit" class="btn btn-primary pull-right">Save</button>

                    @if (Model.Approved == null)
                    {
                        <a class="btn btn-primary jq-approve-link pull-right" data-reload="@Url.Action("Edit", "Workorders", new {id = Model.Id })" href="@Url.Action("Approve", "Workorders", new { id = Model.Id })" data-toggle='tooltip' title='Approve and move to Open Workorders tab' data-placement='top'>Approve</a>

                        <a class="btn btn-warning jq-reject-link pull-right" data-reload="@Url.Action("Edit", "Workorders", new {id = Model.Id })" href="@Url.Action("Reject", "Workorders", new { id = Model.Id })" data-toggle='tooltip' title='Move to Rejected tab' data-placement='top' data-msg='Please Enter the reason(S) for Rejecting this Workorder.'>Reject</a>
                    }

                    @if (UserFunctions.IsAdmin())
                    {
                        <a class="btn btn-danger jq-delete-link pull-right" data-reload="@Url.Action("Index", "Workorders")" href="@Url.Action("Delete", "Workorders", new { id = Model.Id })">Delete</a>
                    }


                    @Html.ActionLink("Cancel", "Index", "Workorders", null, new
               {
                   @class = "btn btn-default pull-left"
               })

                </div>
            </div>

        }
    </div>
</div>
@Html.Partial("_ApproveConfirmationPartial")
@Html.Partial("_DeleteConfirmationPartial")


@section Scripts {
    <script>
        $(function () {
            $('#Estimate').addClass('form-control align-right').removeAttr("data-val-number");
        });
    </script>

    @Scripts.Render("~/bundles/jqueryval")
    <script src="@Url.Content("~/Scripts/mvcfoolproof.unobtrusive.min.js")"></script>

    <script>
        $(function () {
            var minDate = '@Model.Reported.ToShortDateString()';
            var maxDate = '@DateTime.Now.ToShortDateString()';
            $('.wo-jquery-datepicker').datepicker({ minDate: minDate, maxDate: maxDate });
        });
    </script>

    <script>
        $(document).ready(function () {
            var selectValue = "";

            var resultOfPersonServed = "@Html.Raw(Model.PersonServed)";
           
            if (resultOfPersonServed != "") {
                $('#PersonServed').attr('readonly', false);
            }
            else {
                $('#PersonServed').attr('readonly', true);
                //$('#PersonServed').attr('disabled', true );
            }


            $(".person-checkbox-toggle-btn").click(function () {
                if ($(this).find('input:checkbox').is(':checked')) {                    
                    
                    $('#PersonServed').attr('readonly', false);
                    if ($('#PersonServed').val().length < 3) {
                        $('.person-served-inputbox .field-validation-valid').addClass('field-validation-error').fadeIn().text('Please enter at least 3 characters.');
                    }
                }
                else {                  
                    
                    $('#PersonServed').attr('readonly', true);
                    $('.person-served-inputbox .field-validation-valid').removeClass('field-validation-error').fadeOut().text('');
                }
            });
          
            $('#PersonServed').keyup(function () {
               
                if ($('#PersonServed').val().length < 3) {
                    $('.person-served-inputbox .field-validation-valid').addClass('field-validation-error').fadeIn().text('Please enter at least 3 characters.');
                    $('.person-served-inputbox input').addClass('input-error');
                }
                else {
                    $('.person-served-inputbox .field-validation-valid').removeClass('field-validation-error').fadeOut().text('');
                    $('.person-served-inputbox input').removeClass('input-error');
                }
            });

            $('#editform').submit(function () {
                if ($('.person-served-inputbox input').attr('readonly') == undefined && $('#PersonServed').val().length < 3) {
                    return false;
                }
                if ($('.person-served-inputbox input').attr('readonly') == "readonly" ) {
                    return true;
                }
                return true;
            });

            var departmentAreaId = $("#DepartmentAreaId").val();

            if (departmentAreaId != '') {

                $("#DepartmentId").attr('disabled', false);
            }
            else {
                $("#DepartmentId").attr('disabled', true);
            }

            $("#DepartmentAreaId").change(function () {

                $("#DepartmentId").empty();

                $("#DepartmentId").attr('disabled', true);

                selectValue = $("#DepartmentAreaId option:selected").val();

                $.ajax({
                    url: '@Url.Action("GetAreaDepartmnentList", "Workorders")' + '/' + selectValue,
                    dataType: 'JSON',
                    method: 'POST',
                    success: function (data, response) {

                        if (data.length != 0) {

                            var select = $("#DepartmentId");

                            select.empty();

                            for (var i = 0; i < data.length; i++) {

                                select.append('<option value="' + data[i].Value + '">' + data[i].Text + '</option>');
                            }

                            $("#DepartmentId").removeAttr("disabled");
                        }

                    }
                });
            });
        })

    </script>
}
